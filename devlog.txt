MaGiC
Matteo Wong
Caleb Smith-Salzberg
Gilvir Gill

pd 1
---------------------
Mastermind

devlog--
Use keyboard shortcut to jump to end,
 replicate entry template,
 modify appropriately.

zone of reflection--
Flesh out each category whenever necessary, appropriate.
 Need not be fully filled in until end of project,
 but best done as you go along.


/////////// Zone of Reflection \\\\\\\\\\\
------------------------------------------
OBSTACLES OVERCOME
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
wow we so BOSS bc...

Game.java was unable to make a local copy of the gameBoard and pegsBoard for an instance of Computer.java to make its own guesses (the computer needs local copies for the guessing algorithm). We fixed this by making the algorithm run directly from the MasterMind class, instead of within Computer, so no local copies were necessary (we just used the ones from the instance of class Game).

In makeGuess.java, here was a bug that caused things that should have been removed from the arrayList to not be removed.
After a long time tracing, we realized that there was an error that caused an else statement to be run when it should not have been
This caused something to be wrong early on in the algorithm, and messed everything up.
By adding the word "else" before the if, all problems were fixed!

The Board would only print after the first guess. After many-a-trace, we realized a print statemeny is needed BEFORE the guessing while loop.

Player would always lose on the twelth turn due to an if statement with a BE checking currentTurn==12. Fixed by adding a boolean that would be set true if the guesser won and adding that to the if statement so you could still win on the twelth turn.

the turn() method in Game.java wasn't generating the proper pegs. This was because the _masterMind didn't have a local copy of the current guess, so we added that and it worked. This was really frustrating even though the solution was absurdly simple.

UNRESOLVED ISSUES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
blah blah pesky bug...

colors (fancy mode) donâ€™t work on windows

users must enter a zero even when there are no matching elements. For most cases, the zeroes can be ignored and only the "meaningful numbers of one and two are entered.

COOL STUFF LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ArrayList of ArrayList is very helpful even if one is not even using the ArrayList-y part of the ArrayList... it helps with testing, and makes it easier to return ArrayLists :) .

Making logical method names and inputs that describe what the method does is invaluable when looking back on old code, especially if it isn't extremely commented.

Using methods that ask the terminal for something inside of other methods is super useful (eg. calling Prompt.getGuess() inside of turn()). It is useful because it lets you ask the user and immediately put the input into a function without having to make any local variables. It is a little confusing to read, but if your methods and classes have good names it isn't that bad, and conceptually it is pretty awesome!

MID-DEVELOPMENT DESIGN CHANGES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
we changed ___ to ___ bc...

We changed the guesses from 0-5 to 1-6 because an int array is initialized with all the values as 0, and it was useful to have that for writing some of the methods. Also for a user who isn't super comp-sci oriented, starting from 1 might be easier.

We went for a different, more math-y algorithm. The one we wrote in the proposal involved a lot of booleans, if statements, and cases, and ended up being super confusing to try and code, so we scratched it. Instead, the new one just made a list of all the possible guesses and eliminated the ones that wouldn't work, eventually narrowing down to one guess. It has yet to lose!

Changed MasterMind and TwoPlayer games (which have a human user as the mastermind) from the computer automatically giving the pegs to the user trying to put them in, which is more fun and has more user interaction. It was kind of weird just having the computer generate all of its guesses and print them all in ~1 second.

LESSONS LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tales of wisdom gained...
Do not make a new folder for every day! Github does that for you!
Computers are better than humans (at least at mastermind)
Trio!=duo+1;//returns true
Trio==duo*100;//returns true
||||||||||||||||||||||||||||||||||||||||||



 ______   ______   __   __   __       ______   _______
/_____/\ /_____/\ /_/\ /_/\ /_/\     /_____/\ /______/\
\:::_ \ \\::::_\/_\:\ \\ \ \\:\ \    \:::_ \ \\::::__\/__
 \:\ \ \ \\:\/___/\\:\ \\ \ \\:\ \    \:\ \ \ \\:\ /____/\
  \:\ \ \ \\::___\/_\:\_/.:\ \\:\ \____\:\ \ \ \\:\\_  _\/
   \:\/.:| |\:\____/\\ ..::/ / \:\/___/\\:\_\ \ \\:\_\ \ \
    \____/_/ \_____\/ \___/_(   \_____\/ \_____\/ \_____\/
==============================================================


yyyy-mm-dd
--------------------------------------------------------------
<Member> :: <Thing member did.>
<Member> :: <Thing member did.>
<Member> :: <Thing member did.>
==============================================================
2016-01-05
--------------------------------------------------------------
All :: Work on proposal.
==============================================================
2016-01-06
--------------------------------------------------------------
All :: spent the weekend lightly thinking of ideas and algorithms.
==============================================================
2016-01-09
--------------------------------------------------------------
All :: Created every necessary file, based on UMLs and proposal. Discussed organization of github repo.
Matteo :: Began work on Game.java constructor. Wrote improved UMLs.
Caleb :: Wrote a method to translate from a color to a number. Wrote a method for the computer to generate a random combo.
Gilvir :: Began work on prompt.java, which guides the user through the game.
==============================================================
2016-01-10
--------------------------------------------------------------
All :: Wrote basic parts of methods required for the user to play as the guesser.
Matteo :: Wrote a constructor for Computer.java. Wrote todo.txt to organize ideas.
Caleb :: Wrote givePegs, a method that checks a guess, and returns the necessary pegs
Gilvir :: Continued prompt.java.
==============================================================
2016-01-11
--------------------------------------------------------------
All :: Discussed how to dombine all the methods made to complete the mastermind game with the user playing as guesser
Matteo :: Wrote turn() method, which uses previously defined methods to run one turn. Debugged Computer and User, wrote basic Guesser class which needs updating
Caleb :: Updated devlog for all days. Debugged and added to Guess.java so that the user can now play a full game of mastermind as the guesser!
Gilvir :: Finished prompt.java
==============================================================
2016-01-12
--------------------------------------------------------------
All :: Discussed how the algorithm will work and robustifying code so we don't need multiple methods doing very similar things
Matteo :: worked on AI algorithm, Woo.java
Caleb :: made very important KTS for AI algorithm
Gilvir :: robustified Prompt.java
==============================================================
2016-01-14
--------------------------------------------------------------
All :: Discussed how the algorithm will work and robustifying code so we don't need multiple methods doing very similar things
Matteo :: Continued thinking on algorithms and general problems
Caleb :: Formed solid layout for algorithm. Created script to generate all possiblilities, and makeGuess.java, which is close to
         producing a guess based on previous guess and pegs. The idea is to eliminate from all possibilities the ones that do not fit
         the information provided.
Gilvir :: Continued thinking on algorithms and general problems
==============================================================
2016-01-15
--------------------------------------------------------------
All :: Discussed how the algorithm will work and robustifying code so we don't need multiple methods doing very similar things
Matteo :: Continued thinking on algorithms and general problems, started algo specified in proposal
Caleb :: Thought about the algorithm created late the night before, and realized it should work. Removed unnecessary sections,
         and added helpful comments so that teammates can also revise and look over it.
Gilvir ::
==============================================================
2017-01-16
--------------------------------------------------------------
Matteo :: worked on algo, made TwoPlayer.java
Caleb :: Fixed bug in algorithm, so now it works. Must test to see if it comes down to the solution in 12 attempts.
<Member> :: <Thing member did.>
==============================================================
2017-01-17
--------------------------------------------------------------
Matteo :: worked on testing MakeGuess.java in MasterMind.java, minor debugging in MasterMind
Caleb :: Completed version of MasterMind.java, so that the computer guesses against itself, and generates its own pegs
         to test the algorithm... it works!
Gilvir :: worked on hiding final answer
==============================================================
2017-01-18
--------------------------------------------------------------
Matteo :: Made Woo.java work with all three games, still some errors
Caleb :: Began contemplating how the game should run from Woo.java, and what the user's role should be in the different game modes
Gilvir :: Modified Prompt.java for the purposes of Woo.java, worked on hiding final answer
==============================================================
2017-01-19
--------------------------------------------------------------
Matteo :: finished MasterMind so it takes user input for pegs and trolls them
Caleb :: Updated the printing of the game board, and updated MasterMind to take the user input for the pegs when the computer guesses.
Gilvir :: Modified prompts, fixed typos, added comments. Moved threaded masker back to Keyboard
==============================================================
2017-01-20
--------------------------------------------------------------
Matteo :: worked on user inputting their pegs, made it happen a limited number of times
Caleb :: also worked on pegs, cleaning up code, comments
Gilvir :: threaded masker
==============================================================
2017-01-21
--------------------------------------------------------------
Matteo :: fixed bug where you always lose on twelth turn, comments, UMLs, created help feature
==============================================================
2017-01-22
--------------------------------------------------------------
All :: Looked back on everything accomplished, and smiled.
Matteo :: added difficulties
Caleb :: Updated instructions given to user. Randomized selection from the makeGuess algorithm.
Gilvir :: made fancy mode, fixed masking feature, made printBoard statement
All :: bugs, UMLs, flow charts, devlog
